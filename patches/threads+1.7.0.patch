diff --git a/node_modules/threads/dist/master/implementation.node.js b/node_modules/threads/dist/master/implementation.node.js
index df93ca1..daa636b 100644
--- a/node_modules/threads/dist/master/implementation.node.js
+++ b/node_modules/threads/dist/master/implementation.node.js
@@ -109,7 +109,11 @@ function initWorkerThreadsWorker() {
             }
             else if (resolvedScriptPath.match(/\.asar[\/\\]/)) {
                 // See <https://github.com/andywer/threads-plugin/issues/17>
-                super(resolvedScriptPath.replace(/\.asar([\/\\])/, ".asar.unpacked$1"), options);
+                if (options.electronAsarUnpacked) {
+                    super(resolvedScriptPath.replace(/\.asar([\/\\])/, ".asar.unpacked$1"), options);
+                } else {
+                    super(resolvedScriptPath, options);
+                }
             }
             else {
                 super(resolvedScriptPath, options);
diff --git a/node_modules/threads/dist/types/master.d.ts b/node_modules/threads/dist/types/master.d.ts
index a9c9044..87acb17 100644
--- a/node_modules/threads/dist/types/master.d.ts
+++ b/node_modules/threads/dist/types/master.d.ts
@@ -62,6 +62,8 @@ export interface ThreadsWorkerOptions extends WorkerOptions {
     workerData?: any;
     /** Whether to apply CORS protection workaround. Defaults to true. */
     CORSWorkaround?: boolean;
+    /** Whether to apply asar.unpacked path on electron. Defaults to false. */
+    electronAsarUnpack?: boolean;
 }
 /** Worker implementation. Either web worker or a node.js Worker class. */
 export declare class WorkerImplementation extends EventTarget implements Worker {
